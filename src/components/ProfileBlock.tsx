'use client';

import { useState } from 'react';

interface User {
  id: number;
  login: string;
  email: string;
  name?: string;
  phone?: string;
  address?: string;
}

interface ProfileBlockProps {
  user: User;
}

export default function ProfileBlock({ user }: ProfileBlockProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({
    name: user.name || '',
    email: user.email,
    phone: user.phone || '',
    address: user.address || ''
  });

  const handleSave = async () => {
    try {
      const response = await fetch(`/api/user/${user.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        const data = await response.json();
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
        localStorage.setItem('user', JSON.stringify(data.user));
        setIsEditing(false);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  return (
    <div className="profile-card">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="section-title">
        <h2 className="section-title-text">–ü—Ä–æ—Ñ–∏–ª—å</h2>
      </div>

      <div className="profile-content">
        {/* –ê–≤–∞—Ç–∞—Ä */}
        <div className="avatar-container">
          <div className="avatar">
            <span className="avatar-icon">üë§</span>
          </div>
        </div>

        {/* –ü–æ–ª—è —Ñ–æ—Ä–º—ã */}
        <div className="form-fields">
          {/* –ò–º—è */}
          <div className="form-field">
            <label className="form-label">
              –ò–º—è
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => handleInputChange('name', e.target.value)}
              disabled={!isEditing}
              className={`form-input ${isEditing ? 'editable' : 'disabled'}`}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
            />
          </div>

          {/* Email */}
          <div className="form-field">
            <label className="form-label">
              Email
            </label>
            <input
              type="email"
              value={formData.email}
              disabled
              className="form-input disabled"
            />
          </div>

          {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
          <div className="form-field">
            <label className="form-label">
              –¢–µ–ª–µ—Ñ–æ–Ω
            </label>
            <input
              type="tel"
              value={formData.phone}
              onChange={(e) => handleInputChange('phone', e.target.value)}
              disabled={!isEditing}
              className={`form-input ${isEditing ? 'editable' : 'disabled'}`}
              placeholder="+7 (___) ___-__-__"
            />
          </div>

          {/* –ê–¥—Ä–µ—Å */}
          <div className="form-field">
            <label className="form-label">
              –ê–¥—Ä–µ—Å
            </label>
            <input
              type="text"
              value={formData.address}
              onChange={(e) => handleInputChange('address', e.target.value)}
              disabled={!isEditing}
              className={`form-input ${isEditing ? 'editable' : 'disabled'}`}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å"
            />
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
        <button
          onClick={isEditing ? handleSave : () => setIsEditing(true)}
          className={`profile-button ${isEditing ? 'save' : 'edit'}`}
        >
          {isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
        </button>
      </div>
    </div>
  );
}
